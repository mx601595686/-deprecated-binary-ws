"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = { url: '' };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        else {
            throw new Error('传入的参数类型不正确');
        }
        if (!(cf.socket instanceof WS))
            cf.socket = new WS(cf.url, cf);
        super(cf);
        this._socket.on('open', this.emit.bind(this, 'open'));
        this._socket.on('close', this.emit.bind(this, 'close'));
        this._socket.on('error', this.emit.bind(this, 'error'));
        this._socket.on('message', (data) => this._receiveData(data));
        this.id = Socket._id_Number++;
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this._socket.send(data, { binary: true }, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    close() {
        this._socket.close();
    }
}
/**
 * 每新建一个接口+1
 */
Socket._id_Number = 0;
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9Tb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFHekIscURBQWtEO0FBRWxELFlBQW9CLFNBQVEsdUJBQVU7SUFzQmxDLFlBQVksSUFBUztRQUNqQixNQUFNLEVBQUUsR0FBdUIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFM0MsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMzQixFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztRQUNsQixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDM0IsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRW5DLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVWLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQVksS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVTLFNBQVMsQ0FBQyxJQUFZO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUc7Z0JBQzFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDOztBQXRERDs7R0FFRztBQUNZLGlCQUFVLEdBQUcsQ0FBQyxDQUFDO0FBTGxDLHdCQXlEQyIsImZpbGUiOiJzZXJ2ZXIvU29ja2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV1MgZnJvbSAnd3MnO1xyXG5cclxuaW1wb3J0IHsgU2VydmVyU29ja2V0Q29uZmlnIH0gZnJvbSAnLi9TZXJ2ZXJTb2NrZXRDb25maWcnO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0IH0gZnJvbSBcIi4uL2NvbW1vbi9CYXNlU29ja2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/mlrDlu7rkuIDkuKrmjqXlj6MrMVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaWRfTnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjeaOpeWPo+eahGlkXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IGlkOiBudW1iZXI7XHJcblxyXG4gICAgcmVhZG9ubHkgX3NvY2tldDogV1M7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOacjeWKoeWZqOWcsOWdgFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZylcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZ3Mg56uv5Y+j55qE6YWN572uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3M6IFNlcnZlclNvY2tldENvbmZpZylcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3M6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGNmOiBTZXJ2ZXJTb2NrZXRDb25maWcgPSB7IHVybDogJycgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBjZi51cmwgPSBhcmdzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2YsIGFyZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5Lyg5YWl55qE5Y+C5pWw57G75Z6L5LiN5q2j56GuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIShjZi5zb2NrZXQgaW5zdGFuY2VvZiBXUykpIC8v5aaC5p6c5rKh5pyJ55u05o6l5Lyg5YWl5o6l5Y+j77yM5YiZ5Yib5bu65LiA5LiqXHJcbiAgICAgICAgICAgIGNmLnNvY2tldCA9IG5ldyBXUyhjZi51cmwsIGNmKTtcclxuXHJcbiAgICAgICAgc3VwZXIoY2YpO1xyXG5cclxuICAgICAgICB0aGlzLl9zb2NrZXQub24oJ29wZW4nLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnb3BlbicpKTtcclxuICAgICAgICB0aGlzLl9zb2NrZXQub24oJ2Nsb3NlJywgdGhpcy5lbWl0LmJpbmQodGhpcywgJ2Nsb3NlJykpO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbignZXJyb3InLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnZXJyb3InKSk7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9uKCdtZXNzYWdlJywgKGRhdGE6IEJ1ZmZlcikgPT4gdGhpcy5fcmVjZWl2ZURhdGEoZGF0YSkpO1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gU29ja2V0Ll9pZF9OdW1iZXIrKztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NlbmREYXRhKGRhdGE6IEJ1ZmZlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5zZW5kKGRhdGEsIHsgYmluYXJ5OiB0cnVlIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufSJdfQ==
