"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = { url: '' };
        let socket;
        if (args instanceof WS) {
            socket = args;
        }
        else {
            if (typeof args === 'string') {
                cf.url = args;
            }
            else if (typeof args === 'object') {
                Object.assign(cf, args);
            }
            socket = new WS(cf.url, cf);
        }
        socket.on('open', () => this.emit('open'));
        socket.on('close', (code, reason) => this.emit('close', code, reason));
        socket.on('error', (err) => this.emit('error', err));
        socket.on('message', (data) => this._receiveData(data));
        super(socket, 'node', cf);
        this.id = Socket._id_Number++;
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(data, { binary: true }, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    close() {
        this.socket.close();
    }
}
/**
 * 每新建一个接口+1
 *
 * @private
 * @static
 * @memberof Socket
 */
Socket._id_Number = 0;
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9Tb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFHekIscURBQWtEO0FBR2xELFlBQW9CLFNBQVEsdUJBQVU7SUE0QmxDLFlBQVksSUFBUztRQUNqQixNQUFNLEVBQUUsR0FBdUIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDM0MsSUFBSSxNQUFVLENBQUM7UUFFZixFQUFFLENBQUMsQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUIsQ0FBQztZQUVELE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQVksRUFBRSxNQUFjLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdkYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQVksS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFaEUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVTLFNBQVMsQ0FBQyxJQUFZO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUc7Z0JBQ3pDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDOztBQTdERDs7Ozs7O0dBTUc7QUFDWSxpQkFBVSxHQUFHLENBQUMsQ0FBQztBQVRsQyx3QkFnRUMiLCJmaWxlIjoic2VydmVyL1NvY2tldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFdTIGZyb20gJ3dzJztcclxuXHJcbmltcG9ydCB7IFNlcnZlclNvY2tldENvbmZpZyB9IGZyb20gJy4vU2VydmVyU29ja2V0Q29uZmlnJztcclxuaW1wb3J0IHsgQmFzZVNvY2tldCB9IGZyb20gXCIuLi9jb21tb24vQmFzZVNvY2tldFwiO1xyXG5pbXBvcnQgeyBSZWFkeVN0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbi9SZWFkeVN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/mlrDlu7rkuIDkuKrmjqXlj6MrMVxyXG4gICAgICogXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQG1lbWJlcm9mIFNvY2tldFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaWRfTnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjeaOpeWPo+eahGlkXHJcbiAgICAgKiBcclxuICAgICAqIEBtZW1iZXJvZiBTb2NrZXRcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgaWQ6IG51bWJlcjtcclxuXHJcbiAgICByZWFkb25seSBzb2NrZXQ6IFdTO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDmnI3liqHlmajlnLDlnYBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb25maWdzIOerr+WPo+eahOmFjee9rlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdzOiBTZXJ2ZXJTb2NrZXRDb25maWcpXHJcbiAgICBjb25zdHJ1Y3RvcihhcmdzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBjZjogU2VydmVyU29ja2V0Q29uZmlnID0geyB1cmw6ICcnIH07XHJcbiAgICAgICAgbGV0IHNvY2tldDogV1M7XHJcblxyXG4gICAgICAgIGlmIChhcmdzIGluc3RhbmNlb2YgV1MpIHsgICAvL+acjeWKoeWZqOWGhemDqOWIm+W7uueahOaOpeWPo1xyXG4gICAgICAgICAgICBzb2NrZXQgPSBhcmdzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGNmLnVybCA9IGFyZ3M7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNmLCBhcmdzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc29ja2V0ID0gbmV3IFdTKGNmLnVybCwgY2YpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc29ja2V0Lm9uKCdvcGVuJywgKCkgPT4gdGhpcy5lbWl0KCdvcGVuJykpO1xyXG4gICAgICAgIHNvY2tldC5vbignY2xvc2UnLCAoY29kZTogbnVtYmVyLCByZWFzb246IHN0cmluZykgPT4gdGhpcy5lbWl0KCdjbG9zZScsIGNvZGUsIHJlYXNvbikpO1xyXG4gICAgICAgIHNvY2tldC5vbignZXJyb3InLCAoZXJyKSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKSk7XHJcbiAgICAgICAgc29ja2V0Lm9uKCdtZXNzYWdlJywgKGRhdGE6IEJ1ZmZlcikgPT4gdGhpcy5fcmVjZWl2ZURhdGEoZGF0YSkpO1xyXG5cclxuICAgICAgICBzdXBlcihzb2NrZXQsICdub2RlJywgY2YpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBTb2NrZXQuX2lkX051bWJlcisrO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfc2VuZERhdGEoZGF0YTogQnVmZmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChkYXRhLCB7IGJpbmFyeTogdHJ1ZSB9LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufSJdfQ==
