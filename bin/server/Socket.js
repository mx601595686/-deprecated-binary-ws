"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = { url: '' };
        let socket;
        if (args instanceof WS) {
            socket = args;
        }
        else {
            if (typeof args === 'string') {
                cf.url = args;
            }
            else if (typeof args === 'object') {
                Object.assign(cf, args);
            }
            socket = new WS(cf.url, cf);
        }
        socket.on('open', () => this.emit('open'));
        socket.on('close', () => this.emit('close'));
        socket.on('error', (err) => this.emit('error', err));
        socket.on('message', (data) => this._receiveData(data));
        super(socket, 'node', cf);
        this.id = Socket._id_Number++;
    }
    get readyState() {
        return this.socket.readyState;
    }
    get bufferedAmount() {
        return this.socket.bufferedAmount;
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(data, { binary: true }, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    close() {
        this.socket.close();
    }
}
/**
 * 每新建一个接口+1
 *
 * @private
 * @static
 * @memberof Socket
 */
Socket._id_Number = 0;
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9Tb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFHekIscURBQWtEO0FBR2xELFlBQW9CLFNBQVEsdUJBQVU7SUFvQ2xDLFlBQVksSUFBUztRQUNqQixNQUFNLEVBQUUsR0FBdUIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDM0MsSUFBSSxNQUFVLENBQUM7UUFFZixFQUFFLENBQUMsQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUIsQ0FBQztZQUVELE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBWSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVoRSxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBdkNELElBQUksVUFBVTtRQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQWlCLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksY0FBYztRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUN0QyxDQUFDO0lBbUNTLFNBQVMsQ0FBQyxJQUFZO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUc7Z0JBQ3pDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDOztBQXJFRDs7Ozs7O0dBTUc7QUFDWSxpQkFBVSxHQUFHLENBQUMsQ0FBQztBQVRsQyx3QkF3RUMiLCJmaWxlIjoic2VydmVyL1NvY2tldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFdTIGZyb20gJ3dzJztcclxuXHJcbmltcG9ydCB7IFNlcnZlclNvY2tldENvbmZpZyB9IGZyb20gJy4vU2VydmVyU29ja2V0Q29uZmlnJztcclxuaW1wb3J0IHsgQmFzZVNvY2tldCB9IGZyb20gXCIuLi9jb21tb24vQmFzZVNvY2tldFwiO1xyXG5pbXBvcnQgeyBSZWFkeVN0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbi9SZWFkeVN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/mlrDlu7rkuIDkuKrmjqXlj6MrMVxyXG4gICAgICogXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQG1lbWJlcm9mIFNvY2tldFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaWRfTnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjeaOpeWPo+eahGlkXHJcbiAgICAgKiBcclxuICAgICAqIEBtZW1iZXJvZiBTb2NrZXRcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgaWQ6IG51bWJlcjtcclxuXHJcbiAgICByZWFkb25seSBzb2NrZXQ6IFdTO1xyXG5cclxuICAgIGdldCByZWFkeVN0YXRlKCk6IFJlYWR5U3RhdGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlIGFzIGFueTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYnVmZmVyZWRBbW91bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2NrZXQuYnVmZmVyZWRBbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOacjeWKoeWZqOWcsOWdgFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZylcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZ3Mg56uv5Y+j55qE6YWN572uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3M6IFNlcnZlclNvY2tldENvbmZpZylcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3M6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGNmOiBTZXJ2ZXJTb2NrZXRDb25maWcgPSB7IHVybDogJycgfTtcclxuICAgICAgICBsZXQgc29ja2V0OiBXUztcclxuXHJcbiAgICAgICAgaWYgKGFyZ3MgaW5zdGFuY2VvZiBXUykgeyAgIC8v5pyN5Yqh5Zmo5YaF6YOo5Yib5bu655qE5o6l5Y+jXHJcbiAgICAgICAgICAgIHNvY2tldCA9IGFyZ3M7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgY2YudXJsID0gYXJncztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2YsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzb2NrZXQgPSBuZXcgV1MoY2YudXJsLCBjZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzb2NrZXQub24oJ29wZW4nLCAoKSA9PiB0aGlzLmVtaXQoJ29wZW4nKSk7XHJcbiAgICAgICAgc29ja2V0Lm9uKCdjbG9zZScsICgpID0+IHRoaXMuZW1pdCgnY2xvc2UnKSk7XHJcbiAgICAgICAgc29ja2V0Lm9uKCdlcnJvcicsIChlcnIpID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpKTtcclxuICAgICAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCAoZGF0YTogQnVmZmVyKSA9PiB0aGlzLl9yZWNlaXZlRGF0YShkYXRhKSk7XHJcblxyXG4gICAgICAgIHN1cGVyKHNvY2tldCwgJ25vZGUnLCBjZik7XHJcbiAgICAgICAgdGhpcy5pZCA9IFNvY2tldC5faWRfTnVtYmVyKys7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zZW5kRGF0YShkYXRhOiBCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGRhdGEsIHsgYmluYXJ5OiB0cnVlIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xyXG4gICAgfVxyXG59Il19
