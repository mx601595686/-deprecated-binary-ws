"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const events = require("events");
const http = require("http");
const https = require("https");
const Socket_1 = require("./Socket");
class Server extends events.EventEmitter {
    constructor(...args) {
        super();
        /**
         * 保存所有客户端连接。key是socket.id
         */
        this.clients = new Map();
        const config = {
            host: '0.0.0.0',
            port: 8080,
            verifyClient: (info, cb) => {
                this.verifyClient(info.req, info.origin, info.secure).then((result => {
                    if (typeof result === 'boolean') {
                        cb(result);
                    }
                    else {
                        cb(result.res, result.code, result.message);
                    }
                }));
            }
        };
        if (args[0] instanceof http.Server || args[0] instanceof https.Server) {
            config.server = args[0];
            config.host = undefined; //必须清除，否则WS内部会另外创建一个http server
            config.port = undefined;
        }
        else if (typeof args[0] === 'number') {
            config.port = args[0];
        }
        else if (typeof args[0] === 'string') {
            config.host = args[0];
            if (typeof args[1] === 'number')
                config.port = args[1];
        }
        else if (typeof args[0] === 'object') {
            Object.assign(config, args[0]);
        }
        this._ws = new WS.Server(config);
        this._ws.on('error', this.emit.bind(this, 'error'));
        this._ws.on('listening', this.emit.bind(this, 'listening'));
        this._ws.on('connection', (client) => {
            const socket = new Socket_1.Socket(client);
            this.clients.set(socket.id, socket);
            this.emit('connection', socket);
            socket.on('close', () => {
                this.clients.delete(socket.id);
            });
        });
    }
    /**
     * 判断是否接受新的连接。
     * 返回true表示接受，返回false表示拒绝。也可以返回一个对象，提供更多信息。
     *
     * 返回对象：
     *      res {Boolean} Whether or not to accept the handshake.
     *      code {Number} When result is false this field determines the HTTP error status code to be sent to the client.
     *      name {String} When result is false this field determines the HTTP reason phrase.
     *
     * @param {string} origin The value in the Origin header indicated by the client.
     * @param {boolean} secure 'true' if req.connection.authorized or req.connection.encrypted is set.
     * @param {http.IncomingMessage} req The client HTTP GET request.
     * @returns {Promise<boolean | { res: boolean, code?: number, message?: string }>}
     * @memberof Server
     */
    verifyClient(req, origin, secure) {
        return Promise.resolve(true);
    }
    /**
     * 关闭服务器，并断开所有的客户端连接
     *
     * @returns {void}
     * @memberof Server
     */
    close() {
        this._ws.close(err => {
            this.emit('close', err);
        });
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    addListener(event, listener) {
        super.addListener(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
exports.Server = Server;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
