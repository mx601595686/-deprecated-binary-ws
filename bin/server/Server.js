"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const Emitter = require("component-emitter");
const http = require("http");
const https = require("https");
const Socket_1 = require("./Socket");
class Server extends Emitter {
    constructor(...args) {
        super();
        /**
         * 保存所有客户端连接。key是socket.id
         */
        this.clients = new Map();
        const config = {
            host: '0.0.0.0',
            port: 8080,
            needDeserialize: true,
            maxPayload: 1024 * 1024 * 100,
            verifyClient: (info, cb) => {
                this.verifyClient(info.req, info.origin, info.secure).then((result => {
                    if (typeof result === 'boolean') {
                        cb(result);
                    }
                    else {
                        cb(result.res, result.code, result.message);
                    }
                }));
            }
        };
        if (args[0] instanceof http.Server || args[0] instanceof https.Server) {
            config.server = args[0];
        }
        else if (typeof args[0] === 'number') {
            config.port = args[0];
        }
        else if (typeof args[0] === 'string') {
            config.host = args[0];
            if (typeof args[1] === 'number')
                config.port = args[1];
        }
        else if (typeof args[0] === 'object') {
            Object.assign(config, args[0]);
        }
        if (config.server) {
            config.host = undefined; //必须清除，否则WS内部会另外创建一个http server
            config.port = undefined;
        }
        this.ws = new WS.Server(config);
        this.ws.on('error', this.emit.bind(this, 'error'));
        this.ws.once('listening', this.emit.bind(this, 'listening'));
        this.ws._server.once('close', this.emit.bind(this, 'close')); //ws内部会把创建或绑定的http server 保存到_server中
        this.ws.on('connection', (client) => {
            const socket = new Socket_1.Socket({ url: '', socket: client, needDeserialize: config.needDeserialize, maxPayload: config.maxPayload });
            this.clients.set(socket.id, socket);
            socket.once('close', () => {
                this.clients.delete(socket.id);
            });
            socket.once('error', () => {
                socket.close();
            });
            this.emit('connection', socket);
        });
    }
    /**
     * 判断是否接受新的连接。
     * 返回true表示接受，返回false表示拒绝。也可以返回一个对象，提供更多信息。
     *
     * 返回对象：
     *      res {Boolean} Whether or not to accept the handshake.
     *      code {Number} When result is false this field determines the HTTP error status code to be sent to the client.
     *      name {String} When result is false this field determines the HTTP reason phrase.
     *
     * @param {string} origin The value in the Origin header indicated by the client.
     * @param {boolean} secure 'true' if req.connection.authorized or req.connection.encrypted is set.
     * @param {http.IncomingMessage} req The client HTTP GET request.
     * @returns {Promise<boolean | { res: boolean, code?: number, message?: string }>}
     */
    verifyClient(req, origin, secure) {
        return Promise.resolve(true);
    }
    /**
     * 关闭服务器，并断开所有的客户端连接
     */
    close() {
        const server = this.ws._server;
        this.ws.close();
        server.close(); //ws不会吧绑定的server关掉，所以这里再次关闭一下
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
exports.Server = Server;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
