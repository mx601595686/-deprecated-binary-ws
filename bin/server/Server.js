"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const Emitter = require("component-emitter");
const http = require("http");
const https = require("https");
const Socket_1 = require("./../common/Socket");
class Server extends Emitter {
    constructor(...args) {
        super();
        /**
         * 保存所有客户端连接。key是socket.id
         */
        this.clients = new Map();
        const config = {
            host: '0.0.0.0',
            port: 8080,
            maxPayload: 1024 * 1024 * 10,
            verifyClient: (info, cb) => {
                this.verifyClient(info.req, info.origin, info.secure).then(cb);
            },
            clientTracking: false,
        };
        if (args[0] instanceof http.Server || args[0] instanceof https.Server) {
            config.server = args[0];
        }
        else if (typeof args[0] === 'string') {
            config.host = args[0];
            if (typeof args[1] === 'number')
                config.port = args[1];
        }
        else if (typeof args[0] === 'object') {
            Object.assign(config, args[0]);
            config.maxPayload = config.maxPayload < 1024 ? 1024 : config.maxPayload;
        }
        this._ws = new WS.Server(config);
        this._ws.on('error', this.emit.bind(this, 'error'));
        this._ws.on('listening', this.emit.bind(this, 'error'));
        this._ws.on('connection', (client) => {
            const socket = new Socket_1.Socket(client);
            this.onConnection(socket);
            this.clients.set(socket.id, socket);
            socket.on('close', () => {
                this.clients.delete(socket.id);
            });
        });
    }
    /**
     * 判断是否接受新的连接
     *
     * @param {string} origin The value in the Origin header indicated by the client.
     * @param {boolean} secure 'true' if req.connection.authorized or req.connection.encrypted is set.
     * @param {http.IncomingMessage} req The client HTTP GET request.
     * @returns {Promise<boolean>}
     * @memberof Server
     */
    verifyClient(req, origin, secure) {
        return Promise.resolve(true);
    }
    /**
     * 当有新的客户端与服务器建立起连接
     *
     * @param {Socket} socket 接口
     * @memberof Server
     */
    onConnection(socket) { }
    /**
     * 关闭服务器，并断开所有的客户端连接
     *
     * @returns {Promise<void>}
     * @memberof Server
     */
    close() {
        return new Promise((resolve, reject) => {
            this._ws.close(err => {
                err ? reject(err) : resolve();
            });
        });
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
}
exports.Server = Server;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
