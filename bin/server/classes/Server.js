"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WS = require("ws");
const Emitter = require("component-emitter");
const url_1 = require("url");
const ServerSocket_1 = require("./ServerSocket");
class Server extends Emitter {
    /**
     * 创建binary-ws Server。
     * @param server 要绑定的http服务器
     * @param configs 接口配置
     */
    constructor(server, configs) {
        super();
        /**
         * 保存所有客户端连接。key是socket.id
         */
        this.clients = new Map();
        this._http = server;
        this._http.once('close', this.emit.bind(this, 'close'));
        this._ws = new WS.Server({
            server,
            maxPayload: configs.maxPayload == null || configs.maxPayload <= 0 ? undefined : configs.maxPayload + 4,
            path: (new url_1.URL(configs.url)).pathname
        });
        this._ws.on('error', this.emit.bind(this, 'error'));
        this._ws.once('listening', this.emit.bind(this, 'listening'));
        this._ws.on('connection', (client, req) => {
            const socket = new ServerSocket_1.ServerSocket(configs, client);
            this.clients.set(socket.id, socket);
            socket.once('close', () => this.clients.delete(socket.id));
            socket.once('error', () => socket.close()); //接口如果出现异常则关闭
            this.emit('connection', socket, req);
        });
    }
    /**
     * 关闭服务器，并断开所有的客户端连接。（注意这个会将绑定的http server也关了）
     */
    close() {
        this._ws.close();
        this._http.close(); //_ws不会把绑定的server关掉
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
exports.Server = Server;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9jbGFzc2VzL1NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUN6Qiw2Q0FBNkM7QUFHN0MsNkJBQTBCO0FBRTFCLGlEQUE4QztBQUc5QyxZQUFvQixTQUFRLE9BQU87SUFXL0I7Ozs7T0FJRztJQUNILFlBQVksTUFBa0MsRUFBRSxPQUF5QjtRQUNyRSxLQUFLLEVBQUUsQ0FBQztRQVhaOztXQUVHO1FBQ00sWUFBTyxHQUE4QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBVXBELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNyQixNQUFNO1lBQ04sVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxHQUFHLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUM7WUFDdEcsSUFBSSxFQUFFLENBQUMsSUFBSSxTQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUTtTQUN4QyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHO1lBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksMkJBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUVwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhO1lBRXpELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxtQkFBbUI7SUFDM0MsQ0FBQztJQWNELEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDaEMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBTUQsSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQTNFRCx3QkEyRUMiLCJmaWxlIjoic2VydmVyL2NsYXNzZXMvU2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV1MgZnJvbSAnd3MnO1xyXG5pbXBvcnQgKiBhcyBFbWl0dGVyIGZyb20gJ2NvbXBvbmVudC1lbWl0dGVyJztcclxuaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcclxuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSAnaHR0cHMnO1xyXG5pbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnO1xyXG5cclxuaW1wb3J0IHsgU2VydmVyU29ja2V0IH0gZnJvbSAnLi9TZXJ2ZXJTb2NrZXQnO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0Q29uZmlnIH0gZnJvbSAnLi4vLi4vQmFzZVNvY2tldC9pbnRlcmZhY2VzL0Jhc2VTb2NrZXRDb25maWcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlciBleHRlbmRzIEVtaXR0ZXIge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2h0dHA6IGh0dHAuU2VydmVyIHwgaHR0cHMuU2VydmVyO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3dzOiBXUy5TZXJ2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkv53lrZjmiYDmnInlrqLmiLfnq6/ov57mjqXjgIJrZXnmmK9zb2NrZXQuaWRcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgY2xpZW50czogTWFwPG51bWJlciwgU2VydmVyU29ja2V0PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7umJpbmFyeS13cyBTZXJ2ZXLjgIJcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXIg6KaB57uR5a6a55qEaHR0cOacjeWKoeWZqFxyXG4gICAgICogQHBhcmFtIGNvbmZpZ3Mg5o6l5Y+j6YWN572uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNlcnZlcjogaHR0cC5TZXJ2ZXIgfCBodHRwcy5TZXJ2ZXIsIGNvbmZpZ3M6IEJhc2VTb2NrZXRDb25maWcpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9odHRwID0gc2VydmVyO1xyXG4gICAgICAgIHRoaXMuX2h0dHAub25jZSgnY2xvc2UnLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnY2xvc2UnKSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3dzID0gbmV3IFdTLlNlcnZlcih7XHJcbiAgICAgICAgICAgIHNlcnZlcixcclxuICAgICAgICAgICAgbWF4UGF5bG9hZDogY29uZmlncy5tYXhQYXlsb2FkID09IG51bGwgfHwgY29uZmlncy5tYXhQYXlsb2FkIDw9IDAgPyB1bmRlZmluZWQgOiBjb25maWdzLm1heFBheWxvYWQgKyA0LCAvL+WkmuWKoDTmmK/lm6DkuLp0aXRsZemVv+W6pui/mOS8muWNoOS4gOmDqOWIhuaOp+S7tlxyXG4gICAgICAgICAgICBwYXRoOiAobmV3IFVSTChjb25maWdzLnVybCkpLnBhdGhuYW1lXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3dzLm9uKCdlcnJvcicsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpKTtcclxuICAgICAgICB0aGlzLl93cy5vbmNlKCdsaXN0ZW5pbmcnLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnbGlzdGVuaW5nJykpO1xyXG5cclxuICAgICAgICB0aGlzLl93cy5vbignY29ubmVjdGlvbicsIChjbGllbnQsIHJlcSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzb2NrZXQgPSBuZXcgU2VydmVyU29ja2V0KGNvbmZpZ3MsIGNsaWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpZW50cy5zZXQoc29ja2V0LmlkLCBzb2NrZXQpO1xyXG5cclxuICAgICAgICAgICAgc29ja2V0Lm9uY2UoJ2Nsb3NlJywgKCkgPT4gdGhpcy5jbGllbnRzLmRlbGV0ZShzb2NrZXQuaWQpKTtcclxuICAgICAgICAgICAgc29ja2V0Lm9uY2UoJ2Vycm9yJywgKCkgPT4gc29ja2V0LmNsb3NlKCkpOyAvL+aOpeWPo+WmguaenOWHuueOsOW8guW4uOWImeWFs+mXrVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uJywgc29ja2V0LCByZXEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWz6Zet5pyN5Yqh5Zmo77yM5bm25pat5byA5omA5pyJ55qE5a6i5oi356uv6L+e5o6l44CC77yI5rOo5oSP6L+Z5Liq5Lya5bCG57uR5a6a55qEaHR0cCBzZXJ2ZXLkuZ/lhbPkuobvvIlcclxuICAgICAqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fd3MuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLl9odHRwLmNsb3NlKCk7IC8vX3dz5LiN5Lya5oqK57uR5a6a55qEc2VydmVy5YWz5o6JXHJcbiAgICB9XHJcblxyXG4gICAgb24oZXZlbnQ6ICdlcnJvcicsIGxpc3RlbmVyOiAoZXJyOiBFcnJvcikgPT4gdm9pZCk6IHRoaXNcclxuICAgIC8qKlxyXG4gICAgICog5b2T5pyN5Yqh5Zmo5byA5aeL55uR5ZCsXHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50OiAnbGlzdGVuaW5nJywgbGlzdGVuZXI6ICgpID0+IHZvaWQpOiB0aGlzXHJcbiAgICAvKipcclxuICAgICAqIOW9k+acieaWsOeahOWuouaIt+err+S4juacjeWKoeWZqOW7uueri+i1t+i/nuaOpeaXtuinpuWPkeOAgiAgICBcclxuICAgICAqIHJlceS4uuWuouaIt+err+WQkeacjeWKoeWZqOW7uueri+i/nuaOpeaXtuWPkemAgeeahGdldOivt+axgu+8jOWPr+mAmui/h+i/meS4qui/m+ihjOS4gOS6m+eUqOaIt+mqjOivgeOAgiAgICAgXHJcbiAgICAgKiDms6jmhI/vvJrlpoLmnpznlKjmiLfmnKrpgJrov4fpqozor4HvvIzorrDlvpfmiafooYxzb2NrZXQuY2xvc2UoKe+8jOacjeWKoeWZqOW5tuS4jeS8muiHquWKqOaWreW8gOi/nuaOpeOAgiAgICAgXHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50OiAnY29ubmVjdGlvbicsIGxpc3RlbmVyOiAoc29ja2V0OiBTZXJ2ZXJTb2NrZXQsIHJlcTogaHR0cC5JbmNvbWluZ01lc3NhZ2UpID0+IHZvaWQpOiB0aGlzXHJcbiAgICBvbihldmVudDogJ2Nsb3NlJywgbGlzdGVuZXI6IChlcnI6IEVycm9yKSA9PiB2b2lkKTogdGhpc1xyXG4gICAgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKTogdGhpcyB7XHJcbiAgICAgICAgc3VwZXIub24oZXZlbnQsIGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBvbmNlKGV2ZW50OiAnZXJyb3InLCBsaXN0ZW5lcjogKGVycjogRXJyb3IpID0+IHZvaWQpOiB0aGlzXHJcbiAgICBvbmNlKGV2ZW50OiAnbGlzdGVuaW5nJywgbGlzdGVuZXI6ICgpID0+IHZvaWQpOiB0aGlzXHJcbiAgICBvbmNlKGV2ZW50OiAnY29ubmVjdGlvbicsIGxpc3RlbmVyOiAoc29ja2V0OiBTZXJ2ZXJTb2NrZXQsIHJlcTogaHR0cC5JbmNvbWluZ01lc3NhZ2UpID0+IHZvaWQpOiB0aGlzXHJcbiAgICBvbmNlKGV2ZW50OiAnY2xvc2UnLCBsaXN0ZW5lcjogKGVycjogRXJyb3IpID0+IHZvaWQpOiB0aGlzXHJcbiAgICBvbmNlKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBGdW5jdGlvbik6IHRoaXMge1xyXG4gICAgICAgIHN1cGVyLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSJdfQ==
