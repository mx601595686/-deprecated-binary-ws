"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Emitter = require("component-emitter");
/**
 * websocket 接口的抽象类，定义了需要实现的基础功能
 */
class BaseSocket extends Emitter {
    constructor(socket, configs) {
        super();
        /**
         * _messageID 的ID号，id从0开始。每发一条消息，该id加1。
         */
        this._messageID = 0;
        /**
         * 消息的发送队列。如果要取消发送，可以向send中传递以error
         */
        this._sendingQueue = new Map();
        this.id = BaseSocket._id_Number++;
        this._socket = socket;
        this.url = configs.url;
        this.maxPayload = configs.maxPayload == null || configs.maxPayload <= 0 ? 0 : configs.maxPayload + 4;
        this.once('close', () => {
            for (let item of [...this._sendingQueue.keys()].reverse())
                this.cancel(item, new Error('连接中断'));
        });
    }
    /**
     * 连接的当前状态
     */
    get readyState() {
        return this._socket.readyState;
    }
    /**
     * 在缓冲队列中等待发送的数据大小
     */
    get bufferedAmount() {
        let size = 0;
        for (let item of this._sendingQueue.values()) {
            size += item.size;
        }
        return size;
    }
    /**
     * 发送消息。(返回的promise中包含该条消息的messageID)
     * @param title 消息的标题
     * @param data 携带的数据
     */
    send(title, data) {
        const messageID = this._messageID++;
        const result = new Promise((resolve, reject) => {
            const b_title = Buffer.from(title);
            const b_title_length = Buffer.alloc(4);
            b_title_length.writeUInt32BE(b_title.length, 0);
            const r_data = Buffer.concat([b_title_length, b_title, data]);
            if (this.maxPayload !== 0 && r_data.length > this.maxPayload)
                throw new Error('发送的消息大小超出了限制');
            let sent = false; //是否已经执行send了
            const send = (err) => {
                if (sent)
                    return;
                else
                    sent = true;
                if (err !== undefined) {
                    reject(err);
                    this._sendingQueue.delete(messageID);
                }
                else {
                    this._sendData(r_data).then(() => {
                        this._sendingQueue.delete(messageID);
                        resolve();
                    }).catch((err) => {
                        this._sendingQueue.delete(messageID);
                        reject(err);
                    }).then(() => {
                        if (this._sendingQueue.size > 0)
                            this._sendingQueue.values().next().value.send();
                    });
                }
            };
            this._sendingQueue.set(messageID, { size: r_data.length, send });
            if (this._sendingQueue.size === 1)
                send(); //如果没有消息排队就直接发送
        });
        result.messageID = messageID;
        return result;
    }
    /**
     * 取消发送
     * @param messageID 要取消发送消息的messageID
     * @param err 传递一个error，指示取消的原因
     */
    cancel(messageID, err = new Error('发送取消')) {
        const item = this._sendingQueue.get(messageID);
        if (item != null)
            item.send(err);
    }
    /**
     * 解析接收到数据。子类接收到消息后需要触发这个方法
     *
     * @param data 接收到数据
     */
    _receiveData(data) {
        try {
            let offset = 0;
            const title_length = data.readUInt32BE(0);
            offset += 4;
            const title = data.slice(offset, offset += title_length).toString();
            const r_data = data.slice(offset);
            this.emit('message', title, r_data);
        }
        catch (error) {
            this.emit('error', error);
        }
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
/**
 * 每新建一个接口+1
 */
BaseSocket._id_Number = 0;
exports.BaseSocket = BaseSocket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
