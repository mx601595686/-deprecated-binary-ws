"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSocket_1 = require("../../BaseSocket/classes/BaseSocket");
const ReadyState_1 = require("../../BaseSocket/interfaces/ReadyState");
if (!require('is-node'))
    Buffer = require('buffer/').Buffer;
const nodeBufferToArraybuffer = require('to-arraybuffer');
class Socket extends BaseSocket_1.BaseSocket {
    constructor(configs = { url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}` }) {
        super(new WebSocket(configs.url), configs);
        this._socket.binaryType = 'arraybuffer';
        this._socket.onopen = () => this.emit('open');
        this._socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        this._socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接异常')); };
        this._socket.onmessage = (e) => this._receiveData(Buffer.from(e.data));
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            if (this.readyState === ReadyState_1.ReadyState.OPEN) {
                this._socket.send(nodeBufferToArraybuffer(data)); //不可以直接发送buffer
                const check = (interval) => {
                    if (this.readyState === ReadyState_1.ReadyState.OPEN) {
                        setTimeout(() => {
                            if (this._socket.bufferedAmount === 0) {
                                resolve();
                            }
                            else {
                                check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                            }
                        }, interval);
                    }
                    else {
                        reject('网络中断');
                    }
                };
                check(1);
            }
            else {
                reject('网络中断');
            }
        });
    }
    close() {
        this._socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUExQ0Qsd0JBMENDIiwiZmlsZSI6ImNsaWVudC9jbGFzc2VzL1NvY2tldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VTb2NrZXQgfSBmcm9tIFwiLi4vLi4vQmFzZVNvY2tldC9jbGFzc2VzL0Jhc2VTb2NrZXRcIjtcclxuaW1wb3J0IHsgQmFzZVNvY2tldENvbmZpZyB9IGZyb20gXCIuLi8uLi9CYXNlU29ja2V0L2ludGVyZmFjZXMvQmFzZVNvY2tldENvbmZpZ1wiO1xyXG5pbXBvcnQgeyBSZWFkeVN0YXRlIH0gZnJvbSBcIi4uLy4uL0Jhc2VTb2NrZXQvaW50ZXJmYWNlcy9SZWFkeVN0YXRlXCI7XHJcblxyXG5pZiAoIXJlcXVpcmUoJ2lzLW5vZGUnKSkgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjtcclxuY29uc3Qgbm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIgPSByZXF1aXJlKCd0by1hcnJheWJ1ZmZlcicpO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEJhc2VTb2NrZXQge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBfc29ja2V0OiBXZWJTb2NrZXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnczogQmFzZVNvY2tldENvbmZpZyA9IHsgdXJsOiBgd3Mke2xvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdzJyA6ICcnfTovLyR7bG9jYXRpb24uaG9zdH1gIH0pIHtcclxuICAgICAgICBzdXBlcihuZXcgV2ViU29ja2V0KGNvbmZpZ3MudXJsKSwgY29uZmlncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICB0aGlzLl9zb2NrZXQub25vcGVuID0gKCkgPT4gdGhpcy5lbWl0KCdvcGVuJyk7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9uY2xvc2UgPSAoZXYpID0+IHRoaXMuZW1pdCgnY2xvc2UnLCBldi5jb2RlLCBldi5yZWFzb24pO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbmVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmVycm9yKGVyciksIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ+i/nuaOpeW8guW4uCcpKTsgfVxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4gdGhpcy5fcmVjZWl2ZURhdGEoQnVmZmVyLmZyb20oZS5kYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zZW5kRGF0YShkYXRhOiBCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBSZWFkeVN0YXRlLk9QRU4pIHsgIC8v56Gu5L+d572R57uc6L+e5o6l6L+Y5omT5byA552AXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXQuc2VuZChub2RlQnVmZmVyVG9BcnJheWJ1ZmZlcihkYXRhKSk7ICAvL+S4jeWPr+S7peebtOaOpeWPkemAgWJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAoaW50ZXJ2YWw6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFJlYWR5U3RhdGUuT1BFTikgeyAgLy/noa7kv53nvZHnu5zov57mjqXov5jmiZPlvIDnnYBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc29ja2V0LmJ1ZmZlcmVkQW1vdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhpbnRlcnZhbCA+PSAyMDAwID8gMjAwMCA6IGludGVydmFsICogMik7IC8v5pyA5oWiMuenkuajgOafpeS4gOasoVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCfnvZHnu5zkuK3mlq0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2hlY2soMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoJ+e9kee7nOS4reaWrScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcbn0iXX0=
