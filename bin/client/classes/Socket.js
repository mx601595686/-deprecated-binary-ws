"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSocket_1 = require("../../BaseSocket/classes/BaseSocket");
if (!require('is-node'))
    window.Buffer = require('buffer/').Buffer;
const nodeBufferToArraybuffer = require('to-arraybuffer');
class Socket extends BaseSocket_1.BaseSocket {
    constructor(configs = { url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}` }) {
        super(new WebSocket(configs.url), configs);
        this._socket.binaryType = 'arraybuffer';
        this._socket.onopen = () => this.emit('open');
        this._socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        this._socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接异常')); };
        this._socket.onmessage = (e) => this._receiveData(Buffer.from(e.data));
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this._socket.send(nodeBufferToArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this._socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this._socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9jbGFzc2VzL1NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9FQUFpRTtBQUdqRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUFFLE1BQWMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM1RSxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRTFELFlBQW9CLFNBQVEsdUJBQVU7SUFJbEMsWUFBWSxVQUE0QixFQUFFLEdBQUcsRUFBRSxLQUFLLFFBQVEsQ0FBQyxRQUFRLEtBQUssUUFBUSxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2hILEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFUyxTQUFTLENBQUMsSUFBWTtRQUM1QixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUUsZUFBZTtZQUVsRSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQWdCO2dCQUMzQixVQUFVLENBQUM7b0JBQ1AsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDcEMsT0FBTyxFQUFFLENBQUM7b0JBQ2QsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtvQkFDN0QsQ0FBQztnQkFDTCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFBO1lBRUQsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNKO0FBbkNELHdCQW1DQyIsImZpbGUiOiJjbGllbnQvY2xhc3Nlcy9Tb2NrZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU29ja2V0IH0gZnJvbSBcIi4uLy4uL0Jhc2VTb2NrZXQvY2xhc3Nlcy9CYXNlU29ja2V0XCI7XHJcbmltcG9ydCB7IEJhc2VTb2NrZXRDb25maWcgfSBmcm9tIFwiLi4vLi4vQmFzZVNvY2tldC9pbnRlcmZhY2VzL0Jhc2VTb2NrZXRDb25maWdcIjtcclxuXHJcbmlmICghcmVxdWlyZSgnaXMtbm9kZScpKSAod2luZG93IGFzIGFueSkuQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjtcclxuY29uc3Qgbm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIgPSByZXF1aXJlKCd0by1hcnJheWJ1ZmZlcicpO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEJhc2VTb2NrZXQge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBfc29ja2V0OiBXZWJTb2NrZXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnczogQmFzZVNvY2tldENvbmZpZyA9IHsgdXJsOiBgd3Mke2xvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdzJyA6ICcnfTovLyR7bG9jYXRpb24uaG9zdH1gIH0pIHtcclxuICAgICAgICBzdXBlcihuZXcgV2ViU29ja2V0KGNvbmZpZ3MudXJsKSwgY29uZmlncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICB0aGlzLl9zb2NrZXQub25vcGVuID0gKCkgPT4gdGhpcy5lbWl0KCdvcGVuJyk7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9uY2xvc2UgPSAoZXYpID0+IHRoaXMuZW1pdCgnY2xvc2UnLCBldi5jb2RlLCBldi5yZWFzb24pO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbmVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmVycm9yKGVyciksIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ+i/nuaOpeW8guW4uCcpKTsgfVxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4gdGhpcy5fcmVjZWl2ZURhdGEoQnVmZmVyLmZyb20oZS5kYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zZW5kRGF0YShkYXRhOiBCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQuc2VuZChub2RlQnVmZmVyVG9BcnJheWJ1ZmZlcihkYXRhKSk7ICAvL+S4jeWPr+S7peebtOaOpeWPkemAgWJ1ZmZlclxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAoaW50ZXJ2YWw6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NvY2tldC5idWZmZXJlZEFtb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2soaW50ZXJ2YWwgPj0gMjAwMCA/IDIwMDAgOiBpbnRlcnZhbCAqIDIpOyAvL+acgOaFojLnp5Lmo4Dmn6XkuIDmrKFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNoZWNrKDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5jbG9zZSgpO1xyXG4gICAgfVxyXG59Il19
