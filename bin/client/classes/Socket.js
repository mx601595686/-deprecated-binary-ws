"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSocket_1 = require("../../BaseSocket/classes/BaseSocket");
window.Buffer = require('buffer/').Buffer;
const nodeBufferToArraybuffer = require('to-arraybuffer');
class Socket extends BaseSocket_1.BaseSocket {
    constructor(configs = { url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}` }) {
        super(new WebSocket(configs.url), configs);
        this._socket.binaryType = 'arraybuffer';
        this._socket.onopen = () => this.emit('open');
        this._socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        this._socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接异常')); };
        this._socket.onmessage = (e) => this._receiveData(Buffer.from(e.data));
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this._socket.send(nodeBufferToArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this._socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this._socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9jbGFzc2VzL1NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9FQUFpRTtBQUczRCxNQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDakQsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUUxRCxZQUFvQixTQUFRLHVCQUFVO0lBSWxDLFlBQVksVUFBNEIsRUFBRSxHQUFHLEVBQUUsS0FBSyxRQUFRLENBQUMsUUFBUSxLQUFLLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNoSCxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRVMsU0FBUyxDQUFDLElBQVk7UUFDNUIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLGVBQWU7WUFFbEUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxRQUFnQjtnQkFDM0IsVUFBVSxDQUFDO29CQUNQLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3BDLE9BQU8sRUFBRSxDQUFDO29CQUNkLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7b0JBQzdELENBQUM7Z0JBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQTtZQUVELEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQW5DRCx3QkFtQ0MiLCJmaWxlIjoiY2xpZW50L2NsYXNzZXMvU29ja2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVNvY2tldCB9IGZyb20gXCIuLi8uLi9CYXNlU29ja2V0L2NsYXNzZXMvQmFzZVNvY2tldFwiO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0Q29uZmlnIH0gZnJvbSBcIi4uLy4uL0Jhc2VTb2NrZXQvaW50ZXJmYWNlcy9CYXNlU29ja2V0Q29uZmlnXCI7XHJcblxyXG4oPGFueT53aW5kb3cpLkJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlci8nKS5CdWZmZXI7XHJcbmNvbnN0IG5vZGVCdWZmZXJUb0FycmF5YnVmZmVyID0gcmVxdWlyZSgndG8tYXJyYXlidWZmZXInKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTb2NrZXQgZXh0ZW5kcyBCYXNlU29ja2V0IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3NvY2tldDogV2ViU29ja2V0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3M6IEJhc2VTb2NrZXRDb25maWcgPSB7IHVybDogYHdzJHtsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAncycgOiAnJ306Ly8ke2xvY2F0aW9uLmhvc3R9YCB9KSB7XHJcbiAgICAgICAgc3VwZXIobmV3IFdlYlNvY2tldChjb25maWdzLnVybCksIGNvbmZpZ3MpO1xyXG5cclxuICAgICAgICB0aGlzLl9zb2NrZXQuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9ub3BlbiA9ICgpID0+IHRoaXMuZW1pdCgnb3BlbicpO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbmNsb3NlID0gKGV2KSA9PiB0aGlzLmVtaXQoJ2Nsb3NlJywgZXYuY29kZSwgZXYucmVhc29uKTtcclxuICAgICAgICB0aGlzLl9zb2NrZXQub25lcnJvciA9IChlcnIpID0+IHsgY29uc29sZS5lcnJvcihlcnIpLCB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCfov57mjqXlvILluLgnKSk7IH1cclxuICAgICAgICB0aGlzLl9zb2NrZXQub25tZXNzYWdlID0gKGUpID0+IHRoaXMuX3JlY2VpdmVEYXRhKEJ1ZmZlci5mcm9tKGUuZGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfc2VuZERhdGEoZGF0YTogQnVmZmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc29ja2V0LnNlbmQobm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIoZGF0YSkpOyAgLy/kuI3lj6/ku6Xnm7TmjqXlj5HpgIFidWZmZXJcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gKGludGVydmFsOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zb2NrZXQuYnVmZmVyZWRBbW91bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrKGludGVydmFsID49IDIwMDAgPyAyMDAwIDogaW50ZXJ2YWwgKiAyKTsgLy/mnIDmhaIy56eS5qOA5p+l5LiA5qyhXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGVjaygxKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufSJdfQ==
