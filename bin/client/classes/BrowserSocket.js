"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSocket_1 = require("../../BaseSocket/classes/BaseSocket");
const ReadyState_1 = require("../../BaseSocket/interfaces/ReadyState");
if (Buffer == null)
    Buffer = require('buffer/').Buffer;
const nodeBufferToArraybuffer = require('to-arraybuffer');
class BrowserSocket extends BaseSocket_1.BaseSocket {
    constructor(configs = { url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}` }) {
        super(new WebSocket(configs.url), configs);
        this._socket.binaryType = 'arraybuffer';
        this._socket.onopen = () => this.emit('open');
        this._socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        this._socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接异常')); };
        this._socket.onmessage = (e) => this._receiveData(Buffer.from(e.data));
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            if (this.readyState === ReadyState_1.ReadyState.OPEN) {
                this._socket.send(nodeBufferToArraybuffer(data)); //不可以直接发送buffer
                const check = (interval) => {
                    if (this.readyState === ReadyState_1.ReadyState.OPEN) {
                        setTimeout(() => {
                            if (this._socket.bufferedAmount === 0) {
                                resolve();
                            }
                            else {
                                check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                            }
                        }, interval);
                    }
                    else {
                        reject('网络中断');
                    }
                };
                check(1);
            }
            else {
                reject('网络中断');
            }
        });
    }
    close() {
        this._socket.close();
    }
}
exports.BrowserSocket = BrowserSocket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9jbGFzc2VzL0Jyb3dzZXJTb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRUFBaUU7QUFFakUsdUVBQW9FO0FBRXBFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN2RCxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRTFELG1CQUEyQixTQUFRLHVCQUFVO0lBSXpDLFlBQVksVUFBNEIsRUFBRSxHQUFHLEVBQUUsS0FBSyxRQUFRLENBQUMsUUFBUSxLQUFLLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNoSCxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRVMsU0FBUyxDQUFDLElBQVk7UUFDNUIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyx1QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBRSxlQUFlO2dCQUNsRSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQWdCO29CQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLHVCQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDdEMsVUFBVSxDQUFDOzRCQUNQLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3BDLE9BQU8sRUFBRSxDQUFDOzRCQUNkLENBQUM7NEJBQUMsSUFBSSxDQUFDLENBQUM7Z0NBQ0osS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7NEJBQzdELENBQUM7d0JBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUNqQixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDbkIsQ0FBQztnQkFDTCxDQUFDLENBQUE7Z0JBRUQsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNKO0FBMUNELHNDQTBDQyIsImZpbGUiOiJjbGllbnQvY2xhc3Nlcy9Ccm93c2VyU29ja2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVNvY2tldCB9IGZyb20gXCIuLi8uLi9CYXNlU29ja2V0L2NsYXNzZXMvQmFzZVNvY2tldFwiO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0Q29uZmlnIH0gZnJvbSBcIi4uLy4uL0Jhc2VTb2NrZXQvaW50ZXJmYWNlcy9CYXNlU29ja2V0Q29uZmlnXCI7XHJcbmltcG9ydCB7IFJlYWR5U3RhdGUgfSBmcm9tIFwiLi4vLi4vQmFzZVNvY2tldC9pbnRlcmZhY2VzL1JlYWR5U3RhdGVcIjtcclxuXHJcbmlmIChCdWZmZXIgPT0gbnVsbCkgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjtcclxuY29uc3Qgbm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIgPSByZXF1aXJlKCd0by1hcnJheWJ1ZmZlcicpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJyb3dzZXJTb2NrZXQgZXh0ZW5kcyBCYXNlU29ja2V0IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3NvY2tldDogV2ViU29ja2V0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3M6IEJhc2VTb2NrZXRDb25maWcgPSB7IHVybDogYHdzJHtsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAncycgOiAnJ306Ly8ke2xvY2F0aW9uLmhvc3R9YCB9KSB7XHJcbiAgICAgICAgc3VwZXIobmV3IFdlYlNvY2tldChjb25maWdzLnVybCksIGNvbmZpZ3MpO1xyXG5cclxuICAgICAgICB0aGlzLl9zb2NrZXQuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9ub3BlbiA9ICgpID0+IHRoaXMuZW1pdCgnb3BlbicpO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbmNsb3NlID0gKGV2KSA9PiB0aGlzLmVtaXQoJ2Nsb3NlJywgZXYuY29kZSwgZXYucmVhc29uKTtcclxuICAgICAgICB0aGlzLl9zb2NrZXQub25lcnJvciA9IChlcnIpID0+IHsgY29uc29sZS5lcnJvcihlcnIpLCB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCfov57mjqXlvILluLgnKSk7IH1cclxuICAgICAgICB0aGlzLl9zb2NrZXQub25tZXNzYWdlID0gKGUpID0+IHRoaXMuX3JlY2VpdmVEYXRhKEJ1ZmZlci5mcm9tKGUuZGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfc2VuZERhdGEoZGF0YTogQnVmZmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gUmVhZHlTdGF0ZS5PUEVOKSB7ICAvL+ehruS/nee9kee7nOi/nuaOpei/mOaJk+W8gOedgFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc29ja2V0LnNlbmQobm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIoZGF0YSkpOyAgLy/kuI3lj6/ku6Xnm7TmjqXlj5HpgIFidWZmZXJcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gKGludGVydmFsOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBSZWFkeVN0YXRlLk9QRU4pIHsgIC8v56Gu5L+d572R57uc6L+e5o6l6L+Y5omT5byA552AXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NvY2tldC5idWZmZXJlZEFtb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2soaW50ZXJ2YWwgPj0gMjAwMCA/IDIwMDAgOiBpbnRlcnZhbCAqIDIpOyAvL+acgOaFojLnp5Lmo4Dmn6XkuIDmrKFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgn572R57uc5Lit5patJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNoZWNrKDEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KCfnvZHnu5zkuK3mlq0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5jbG9zZSgpO1xyXG4gICAgfVxyXG59Il19
