"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blobToBuffer = require('blob-to-buffer');
const toArrayBuffer = require('to-arraybuffer');
const BaseSocket_1 = require("../common/BaseSocket");
class BinaryWS extends BaseSocket_1.BaseSocket {
    get readyState() {
        return this.socket.readyState;
    }
    get bufferedAmount() {
        return this.socket.bufferedAmount;
    }
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        const socket = new WebSocket(cf.url);
        socket.binaryType = 'arraybuffer';
        socket.onopen = () => this.emit('open');
        socket.onclose = () => this.emit('close');
        socket.onerror = (err) => { console.error(err), this.emit('error', new Error(err.toString())); };
        socket.onmessage = (e) => this._receiveData(e.data);
        super(socket, 'browser', cf);
    }
    send(messageName, data, needACK = true) {
        // 检查将要序列化的元素中是否包含ArrayBuffer或Blob
        data = data ? data.map(item => {
            if (item instanceof Blob) {
                return blobToBuffer(item);
            }
            return item;
        }) : undefined;
        return super.send(messageName, data, needACK);
    }
    async _sendData(data) {
        this.socket.send(toArrayBuffer(data));
    }
    close() {
        this.socket.close();
    }
}
exports.default = BinaryWS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LCJmaWxlIjoiYnJvd3Nlci9CaW5hcnlXUy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJsb2JUb0J1ZmZlciA9IHJlcXVpcmUoJ2Jsb2ItdG8tYnVmZmVyJyk7XHJcbmNvbnN0IHRvQXJyYXlCdWZmZXIgPSByZXF1aXJlKCd0by1hcnJheWJ1ZmZlcicpO1xyXG5cclxuaW1wb3J0IHsgQmFzZVNvY2tldENvbmZpZyB9IGZyb20gJy4vLi4vY29tbW9uL0Jhc2VTb2NrZXRDb25maWcnO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0IH0gZnJvbSBcIi4uL2NvbW1vbi9CYXNlU29ja2V0XCI7XHJcbmltcG9ydCB7IFJlYWR5U3RhdGUgfSBmcm9tIFwiLi4vY29tbW9uL1JlYWR5U3RhdGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmFyeVdTIGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgcmVhZG9ubHkgc29ja2V0OiBXZWJTb2NrZXQ7XHJcblxyXG4gICAgZ2V0IHJlYWR5U3RhdGUoKTogUmVhZHlTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgYXMgYW55O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBidWZmZXJlZEFtb3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvY2tldC5idWZmZXJlZEFtb3VudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg5pyN5Yqh5Zmo5Zyw5Z2A77yM5aaC5p6c5LiN5oyH5a6a77yM6buY6K6k6L+e5o6l55qE5piv5b2T5YmN5Z+f5ZCN5LiL55qE5qC5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlncyDnq6/lj6PnmoTphY3nva5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnczogQmFzZVNvY2tldENvbmZpZylcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3M/OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBjZjogQmFzZVNvY2tldENvbmZpZyA9IHtcclxuICAgICAgICAgICAgdXJsOiBgd3Mke2xvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdzJyA6ICcnfTovLyR7bG9jYXRpb24uaG9zdH1gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNmLnVybCA9IGFyZ3M7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjZiwgYXJncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzb2NrZXQgPSBuZXcgV2ViU29ja2V0KGNmLnVybCk7XHJcbiAgICAgICAgc29ja2V0LmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xyXG4gICAgICAgIHNvY2tldC5vbm9wZW4gPSAoKSA9PiB0aGlzLmVtaXQoJ29wZW4nKTtcclxuICAgICAgICBzb2NrZXQub25jbG9zZSA9ICgpID0+IHRoaXMuZW1pdCgnY2xvc2UnKTtcclxuICAgICAgICBzb2NrZXQub25lcnJvciA9IChlcnIpID0+IHsgY29uc29sZS5lcnJvcihlcnIpLCB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKGVyci50b1N0cmluZygpKSk7IH1cclxuICAgICAgICBzb2NrZXQub25tZXNzYWdlID0gKGUpID0+IHRoaXMuX3JlY2VpdmVEYXRhKGUuZGF0YSk7XHJcblxyXG4gICAgICAgIHN1cGVyKHNvY2tldCwgJ2Jyb3dzZXInLCBjZik7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZChtZXNzYWdlTmFtZTogc3RyaW5nLCBkYXRhPzogYW55W10sIG5lZWRBQ0s6IGJvb2xlYW4gPSB0cnVlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgLy8g5qOA5p+l5bCG6KaB5bqP5YiX5YyW55qE5YWD57Sg5Lit5piv5ZCm5YyF5ZCrQXJyYXlCdWZmZXLmiJZCbG9iXHJcbiAgICAgICAgZGF0YSA9IGRhdGEgPyBkYXRhLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBCbG9iKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvYlRvQnVmZmVyKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgIH0pIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBzdXBlci5zZW5kKG1lc3NhZ2VOYW1lLCBkYXRhLCBuZWVkQUNLKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgX3NlbmREYXRhKGRhdGE6IEJ1ZmZlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmQodG9BcnJheUJ1ZmZlcihkYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufSJdfQ==
