"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blobToBuffer = require('blob-to-buffer');
const toArrayBuffer = require('to-arraybuffer');
const BaseSocket_1 = require("../common/BaseSocket");
class BinaryWS extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        const socket = new WebSocket(cf.url);
        socket.binaryType = 'arraybuffer';
        socket.onopen = () => this.emit('open');
        socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        socket.onmessage = (e) => this._receiveData(e.data);
        super(socket, 'browser', cf);
    }
    send(messageName, data, needACK = true) {
        // 检查将要序列化的元素中是否包含Blob
        data = data ? data.map(item => {
            if (item instanceof Blob) {
                return blobToBuffer(item);
            }
            return item;
        }) : undefined;
        return super.send(messageName, data, needACK);
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(toArrayBuffer(data));
            const check = (interval) => {
                setTimeout(() => {
                    if (this.socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(10);
        });
    }
    close() {
        this.socket.close();
    }
}
exports.default = BinaryWS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxJQUFJLENBQUMsQ0FBQzt3QkFDSixLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtvQkFDN0QsQ0FBQztnQkFDTCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFBO1lBRUQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUNKO0FBakVELDJCQWlFQyIsImZpbGUiOiJicm93c2VyL0JpbmFyeVdTLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmxvYlRvQnVmZmVyID0gcmVxdWlyZSgnYmxvYi10by1idWZmZXInKTtcclxuY29uc3QgdG9BcnJheUJ1ZmZlciA9IHJlcXVpcmUoJ3RvLWFycmF5YnVmZmVyJyk7XHJcblxyXG5pbXBvcnQgeyBCYXNlU29ja2V0Q29uZmlnIH0gZnJvbSAnLi8uLi9jb21tb24vQmFzZVNvY2tldENvbmZpZyc7XHJcbmltcG9ydCB7IEJhc2VTb2NrZXQgfSBmcm9tIFwiLi4vY29tbW9uL0Jhc2VTb2NrZXRcIjtcclxuaW1wb3J0IHsgUmVhZHlTdGF0ZSB9IGZyb20gXCIuLi9jb21tb24vUmVhZHlTdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluYXJ5V1MgZXh0ZW5kcyBCYXNlU29ja2V0IHtcclxuXHJcbiAgICByZWFkb25seSBzb2NrZXQ6IFdlYlNvY2tldDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg5pyN5Yqh5Zmo5Zyw5Z2A77yM5aaC5p6c5LiN5oyH5a6a77yM6buY6K6k6L+e5o6l55qE5piv5b2T5YmN5Z+f5ZCN5LiL55qE5qC5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlncyDnq6/lj6PnmoTphY3nva5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnczogQmFzZVNvY2tldENvbmZpZylcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3M/OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBjZjogQmFzZVNvY2tldENvbmZpZyA9IHtcclxuICAgICAgICAgICAgdXJsOiBgd3Mke2xvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdzJyA6ICcnfTovLyR7bG9jYXRpb24uaG9zdH1gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNmLnVybCA9IGFyZ3M7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjZiwgYXJncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzb2NrZXQgPSBuZXcgV2ViU29ja2V0KGNmLnVybCk7XHJcbiAgICAgICAgc29ja2V0LmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xyXG4gICAgICAgIHNvY2tldC5vbm9wZW4gPSAoKSA9PiB0aGlzLmVtaXQoJ29wZW4nKTtcclxuICAgICAgICBzb2NrZXQub25jbG9zZSA9IChldikgPT4gdGhpcy5lbWl0KCdjbG9zZScsIGV2LmNvZGUsIGV2LnJlYXNvbik7XHJcbiAgICAgICAgc29ja2V0Lm9uZXJyb3IgPSAoZXJyKSA9PiB7IGNvbnNvbGUuZXJyb3IoZXJyKSwgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcign6L+e5o6l6ZSZ6K+vJykpOyB9XHJcbiAgICAgICAgc29ja2V0Lm9ubWVzc2FnZSA9IChlKSA9PiB0aGlzLl9yZWNlaXZlRGF0YShlLmRhdGEpO1xyXG5cclxuICAgICAgICBzdXBlcihzb2NrZXQsICdicm93c2VyJywgY2YpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmQobWVzc2FnZU5hbWU6IHN0cmluZywgZGF0YT86IGFueVtdLCBuZWVkQUNLOiBib29sZWFuID0gdHJ1ZSk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgLy8g5qOA5p+l5bCG6KaB5bqP5YiX5YyW55qE5YWD57Sg5Lit5piv5ZCm5YyF5ZCrQmxvYlxyXG4gICAgICAgIGRhdGEgPSBkYXRhID8gZGF0YS5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2JUb0J1ZmZlcihpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9KSA6IHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gc3VwZXIuc2VuZChtZXNzYWdlTmFtZSwgZGF0YSwgbmVlZEFDSyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zZW5kRGF0YShkYXRhOiBCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKHRvQXJyYXlCdWZmZXIoZGF0YSkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAoaW50ZXJ2YWw6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0LmJ1ZmZlcmVkQW1vdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhpbnRlcnZhbCA+PSAyMDAwID8gMjAwMCA6IGludGVydmFsICogMik7IC8v5pyA5oWiMuenkuajgOafpeS4gOasoVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2soMTApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcbn0iXX0=
