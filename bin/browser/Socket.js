"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isBuffer = require('is-buffer');
const isBlob = require('is-blob');
const isArrayBuffer = require('is-array-buffer');
const isTypedBuffer = require('is-typedarray');
const blobToBuffer = require('blob-to-buffer');
const typedToBuffer = require('typedarray-to-buffer');
const toArrayBuffer = require('to-arraybuffer');
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        if (!(cf.socket instanceof WebSocket))
            cf.socket = new WebSocket(cf.url);
        (cf.socket).binaryType = 'arraybuffer';
        (cf.socket).onopen = () => this.emit('open');
        (cf.socket).onclose = (ev) => this.emit('close', ev.code, ev.reason);
        (cf.socket).onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        (cf.socket).onmessage = (e) => this._receiveData(typedToBuffer(e.data));
        super('browser', cf);
    }
    /**
     * 浏览器版除了可以直接发送Buffer之外还可以直接发送ArrayBuffer、TypedBuffer、Blob
     */
    send(messageName, data, needACK = true) {
        if (Array.isArray(data)) {
            data = data.map(item => {
                if (isBuffer(item)) {
                    return item;
                }
                else if (isBlob(item)) {
                    return blobToBuffer(item);
                }
                else if (isArrayBuffer(item) || isTypedBuffer(item)) {
                    return typedToBuffer(item);
                }
                else {
                    return item;
                }
            });
        }
        else if (isBuffer(data)) {
            data = data;
        }
        else if (isBlob(data)) {
            data = blobToBuffer(data);
        }
        else if (isArrayBuffer(data) || isTypedBuffer(data)) {
            data = typedToBuffer(data);
        }
        return super.send(messageName, data, needACK);
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(toArrayBuffer(data));
            const check = (interval) => {
                setTimeout(() => {
                    if (this.socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(10);
        });
    }
    close() {
        this.socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
