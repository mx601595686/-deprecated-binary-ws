"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object2buffer_1 = require("object2buffer");
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        if (!(cf.socket instanceof WebSocket))
            cf.socket = new WebSocket(cf.url);
        (cf.socket).binaryType = 'arraybuffer';
        (cf.socket).onopen = () => this.emit('open');
        (cf.socket).onclose = (ev) => this.emit('close', ev.code, ev.reason);
        (cf.socket).onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        (cf.socket).onmessage = (e) => this._receiveData(object2buffer_1.NodeBuffer.from(e.data));
        super(cf);
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this._socket.send(object2buffer_1.nodeBufferToArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this._socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this._socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNKO0FBeERELHdCQXdEQyIsImZpbGUiOiJicm93c2VyL1NvY2tldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGVCdWZmZXIsIG5vZGVCdWZmZXJUb0FycmF5YnVmZmVyIH0gZnJvbSAnb2JqZWN0MmJ1ZmZlcic7XHJcblxyXG5pbXBvcnQgeyBCYXNlU29ja2V0Q29uZmlnIH0gZnJvbSAnLi8uLi9jb21tb24vQmFzZVNvY2tldENvbmZpZyc7XHJcbmltcG9ydCB7IEJhc2VTb2NrZXQgfSBmcm9tIFwiLi4vY29tbW9uL0Jhc2VTb2NrZXRcIjtcclxuaW1wb3J0IHsgUmVhZHlTdGF0ZSB9IGZyb20gXCIuLi9jb21tb24vUmVhZHlTdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEJhc2VTb2NrZXQge1xyXG5cclxuICAgIHJlYWRvbmx5IF9zb2NrZXQ6IFdlYlNvY2tldDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsXSDmnI3liqHlmajlnLDlnYDvvIzlpoLmnpzkuI3mjIflrprvvIzpu5jorqTov57mjqXnmoTmmK/lvZPliY3ln5/lkI3kuIvnmoTmoLlcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodXJsPzogc3RyaW5nKVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gIHtCYXNlU29ja2V0Q29uZmlnfSBbY29uZmlnc10g56uv5Y+j55qE6YWN572uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3M/OiBCYXNlU29ja2V0Q29uZmlnKVxyXG4gICAgY29uc3RydWN0b3IoYXJncz86IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGNmOiBCYXNlU29ja2V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICB1cmw6IGB3cyR7bG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3MnIDogJyd9Oi8vJHtsb2NhdGlvbi5ob3N0fWBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY2YudXJsID0gYXJncztcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNmLCBhcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKGNmLnNvY2tldCBpbnN0YW5jZW9mIFdlYlNvY2tldCkpXHJcbiAgICAgICAgICAgIGNmLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoY2YudXJsKTtcclxuXHJcbiAgICAgICAgKDxXZWJTb2NrZXQ+KGNmLnNvY2tldCkpLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xyXG4gICAgICAgICg8V2ViU29ja2V0PihjZi5zb2NrZXQpKS5vbm9wZW4gPSAoKSA9PiB0aGlzLmVtaXQoJ29wZW4nKTtcclxuICAgICAgICAoPFdlYlNvY2tldD4oY2Yuc29ja2V0KSkub25jbG9zZSA9IChldikgPT4gdGhpcy5lbWl0KCdjbG9zZScsIGV2LmNvZGUsIGV2LnJlYXNvbik7XHJcbiAgICAgICAgKDxXZWJTb2NrZXQ+KGNmLnNvY2tldCkpLm9uZXJyb3IgPSAoZXJyKSA9PiB7IGNvbnNvbGUuZXJyb3IoZXJyKSwgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcign6L+e5o6l6ZSZ6K+vJykpOyB9XHJcbiAgICAgICAgKDxXZWJTb2NrZXQ+KGNmLnNvY2tldCkpLm9ubWVzc2FnZSA9IChlKSA9PiB0aGlzLl9yZWNlaXZlRGF0YShOb2RlQnVmZmVyLmZyb20oZS5kYXRhKSk7XHJcblxyXG4gICAgICAgIHN1cGVyKGNmKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NlbmREYXRhKGRhdGE6IEJ1ZmZlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5zZW5kKG5vZGVCdWZmZXJUb0FycmF5YnVmZmVyKGRhdGEpKTsgIC8v5LiN5Y+v5Lul55u05o6l5Y+R6YCBYnVmZmVyXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGVjayA9IChpbnRlcnZhbDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc29ja2V0LmJ1ZmZlcmVkQW1vdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhpbnRlcnZhbCA+PSAyMDAwID8gMjAwMCA6IGludGVydmFsICogMik7IC8v5pyA5oWiMuenkuajgOafpeS4gOasoVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2soMSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuIl19
