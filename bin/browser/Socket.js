"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object2buffer_1 = require("object2buffer");
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        if (!(cf.socket instanceof WebSocket))
            cf.socket = new WebSocket(cf.url);
        super(cf);
        this._socket.binaryType = 'arraybuffer';
        this._socket.onopen = () => this.emit('open');
        this._socket.onclose = (ev) => this.emit('close', ev.code, ev.reason);
        this._socket.onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        this._socket.onmessage = (e) => this._receiveData(object2buffer_1.NodeBuffer.from(e.data));
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this._socket.send(object2buffer_1.nodeBufferToArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this._socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this._socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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aWxlIjoiYnJvd3Nlci9Tb2NrZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlQnVmZmVyLCBub2RlQnVmZmVyVG9BcnJheWJ1ZmZlciB9IGZyb20gJ29iamVjdDJidWZmZXInO1xyXG5cclxuaW1wb3J0IHsgQmFzZVNvY2tldENvbmZpZyB9IGZyb20gJy4vLi4vY29tbW9uL0Jhc2VTb2NrZXRDb25maWcnO1xyXG5pbXBvcnQgeyBCYXNlU29ja2V0IH0gZnJvbSBcIi4uL2NvbW1vbi9CYXNlU29ja2V0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgcmVhZG9ubHkgX3NvY2tldDogV2ViU29ja2V0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdIOacjeWKoeWZqOWcsOWdgO+8jOWmguaenOS4jeaMh+Wumu+8jOm7mOiupOi/nuaOpeeahOaYr+W9k+WJjeWfn+WQjeS4i+eahOaguVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1cmw/OiBzdHJpbmcpXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSAge0Jhc2VTb2NrZXRDb25maWd9IFtjb25maWdzXSDnq6/lj6PnmoTphY3nva5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlncz86IEJhc2VTb2NrZXRDb25maWcpXHJcbiAgICBjb25zdHJ1Y3RvcihhcmdzPzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgY2Y6IEJhc2VTb2NrZXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHVybDogYHdzJHtsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAncycgOiAnJ306Ly8ke2xvY2F0aW9uLmhvc3R9YFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBjZi51cmwgPSBhcmdzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2YsIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEoY2Yuc29ja2V0IGluc3RhbmNlb2YgV2ViU29ja2V0KSlcclxuICAgICAgICAgICAgY2Yuc29ja2V0ID0gbmV3IFdlYlNvY2tldChjZi51cmwpO1xyXG5cclxuICAgICAgICBzdXBlcihjZik7XHJcblxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICB0aGlzLl9zb2NrZXQub25vcGVuID0gKCkgPT4gdGhpcy5lbWl0KCdvcGVuJyk7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0Lm9uY2xvc2UgPSAoZXYpID0+IHRoaXMuZW1pdCgnY2xvc2UnLCBldi5jb2RlLCBldi5yZWFzb24pO1xyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbmVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmVycm9yKGVyciksIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ+i/nuaOpemUmeivrycpKTsgfVxyXG4gICAgICAgIHRoaXMuX3NvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4gdGhpcy5fcmVjZWl2ZURhdGEoTm9kZUJ1ZmZlci5mcm9tKGUuZGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfc2VuZERhdGEoZGF0YTogQnVmZmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc29ja2V0LnNlbmQobm9kZUJ1ZmZlclRvQXJyYXlidWZmZXIoZGF0YSkpOyAgLy/kuI3lj6/ku6Xnm7TmjqXlj5HpgIFidWZmZXJcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gKGludGVydmFsOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zb2NrZXQuYnVmZmVyZWRBbW91bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrKGludGVydmFsID49IDIwMDAgPyAyMDAwIDogaW50ZXJ2YWwgKiAyKTsgLy/mnIDmhaIy56eS5qOA5p+l5LiA5qyhXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGVjaygxKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufVxyXG4iXX0=
