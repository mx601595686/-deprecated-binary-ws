"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _Buffer = require('buffer/').Buffer;
const bufferToArraybuffer = require('to-arraybuffer');
const blobToBuffer = require('blob-to-buffer');
const typedarrayToBuffer = require("typedarray-to-buffer");
const isTypedBuffer = require('is-typedarray');
const isBlob = require('is-blob');
const isArrayBuffer = require('is-array-buffer');
const isDataView = (x) => {
    return x instanceof DataView || Object.prototype.toString.call(x) === '[object DataView]';
};
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        if (!(cf.socket instanceof WebSocket))
            cf.socket = new WebSocket(cf.url);
        (cf.socket).binaryType = 'arraybuffer';
        (cf.socket).onopen = () => this.emit('open');
        (cf.socket).onclose = (ev) => this.emit('close', ev.code, ev.reason);
        (cf.socket).onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        (cf.socket).onmessage = (e) => this._receiveData(_Buffer.from(e.data));
        super('browser', cf);
    }
    /**
     * 浏览器版除了可以直接发送Buffer之外还可以直接发送ArrayBuffer、TypedBuffer、DataView、Blob
     */
    send(messageName, data, needACK = true) {
        if (Array.isArray(data)) {
            data = data.map(item => this._transformType(item));
        }
        else {
            data = this._transformType(data);
        }
        return super.send(messageName, data, needACK);
    }
    // 转换成满足发送要求的类型
    _transformType(data) {
        if (isBlob(data)) {
            return blobToBuffer(data);
        }
        else if (isArrayBuffer(data) || isTypedBuffer(data)) {
            return typedarrayToBuffer(data);
        }
        else if (isDataView(data)) {
            return typedarrayToBuffer(data.buffer);
        }
        else {
            return data;
        }
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(bufferToArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this.socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this.socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLGVBQWU7WUFFN0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxRQUFnQjtnQkFDM0IsVUFBVSxDQUFDO29CQUNQLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ25DLE9BQU8sRUFBRSxDQUFDO29CQUNkLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7b0JBQzdELENBQUM7Z0JBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQTtZQUVELEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7Q0FDSjtBQWxGRCx3QkFrRkMiLCJmaWxlIjoiYnJvd3Nlci9Tb2NrZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfQnVmZmVyOiB0eXBlb2YgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjtcclxuY29uc3QgYnVmZmVyVG9BcnJheWJ1ZmZlciA9IHJlcXVpcmUoJ3RvLWFycmF5YnVmZmVyJyk7XHJcbmNvbnN0IGJsb2JUb0J1ZmZlciA9IHJlcXVpcmUoJ2Jsb2ItdG8tYnVmZmVyJyk7XHJcbmNvbnN0IHR5cGVkYXJyYXlUb0J1ZmZlciA9IHJlcXVpcmUoXCJ0eXBlZGFycmF5LXRvLWJ1ZmZlclwiKTtcclxuXHJcbmNvbnN0IGlzVHlwZWRCdWZmZXIgPSByZXF1aXJlKCdpcy10eXBlZGFycmF5Jyk7XHJcbmNvbnN0IGlzQmxvYiA9IHJlcXVpcmUoJ2lzLWJsb2InKTtcclxuY29uc3QgaXNBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJ2lzLWFycmF5LWJ1ZmZlcicpO1xyXG5jb25zdCBpc0RhdGFWaWV3ID0gKHg6IGFueSkgPT4ge1xyXG4gICAgcmV0dXJuIHggaW5zdGFuY2VvZiBEYXRhVmlldyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IERhdGFWaWV3XSc7XHJcbn1cclxuXHJcbmltcG9ydCB7IEJhc2VTb2NrZXRDb25maWcgfSBmcm9tICcuLy4uL2NvbW1vbi9CYXNlU29ja2V0Q29uZmlnJztcclxuaW1wb3J0IHsgQmFzZVNvY2tldCB9IGZyb20gXCIuLi9jb21tb24vQmFzZVNvY2tldFwiO1xyXG5pbXBvcnQgeyBSZWFkeVN0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbi9SZWFkeVN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgQmFzZVNvY2tldCB7XHJcblxyXG4gICAgcmVhZG9ubHkgc29ja2V0OiBXZWJTb2NrZXQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VybF0g5pyN5Yqh5Zmo5Zyw5Z2A77yM5aaC5p6c5LiN5oyH5a6a77yM6buY6K6k6L+e5o6l55qE5piv5b2T5YmN5Z+f5ZCN5LiL55qE5qC5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHVybD86IHN0cmluZylcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtICB7QmFzZVNvY2tldENvbmZpZ30gW2NvbmZpZ3NdIOerr+WPo+eahOmFjee9rlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdzPzogQmFzZVNvY2tldENvbmZpZylcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3M/OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBjZjogQmFzZVNvY2tldENvbmZpZyA9IHtcclxuICAgICAgICAgICAgdXJsOiBgd3Mke2xvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdzJyA6ICcnfTovLyR7bG9jYXRpb24uaG9zdH1gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNmLnVybCA9IGFyZ3M7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjZiwgYXJncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIShjZi5zb2NrZXQgaW5zdGFuY2VvZiBXZWJTb2NrZXQpKVxyXG4gICAgICAgICAgICBjZi5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KGNmLnVybCk7XHJcblxyXG4gICAgICAgICg8V2ViU29ja2V0PihjZi5zb2NrZXQpKS5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICAoPFdlYlNvY2tldD4oY2Yuc29ja2V0KSkub25vcGVuID0gKCkgPT4gdGhpcy5lbWl0KCdvcGVuJyk7XHJcbiAgICAgICAgKDxXZWJTb2NrZXQ+KGNmLnNvY2tldCkpLm9uY2xvc2UgPSAoZXYpID0+IHRoaXMuZW1pdCgnY2xvc2UnLCBldi5jb2RlLCBldi5yZWFzb24pO1xyXG4gICAgICAgICg8V2ViU29ja2V0PihjZi5zb2NrZXQpKS5vbmVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmVycm9yKGVyciksIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ+i/nuaOpemUmeivrycpKTsgfVxyXG4gICAgICAgICg8V2ViU29ja2V0PihjZi5zb2NrZXQpKS5vbm1lc3NhZ2UgPSAoZSkgPT4gdGhpcy5fcmVjZWl2ZURhdGEoX0J1ZmZlci5mcm9tKGUuZGF0YSkpO1xyXG5cclxuICAgICAgICBzdXBlcignYnJvd3NlcicsIGNmKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa1j+iniOWZqOeJiOmZpOS6huWPr+S7peebtOaOpeWPkemAgUJ1ZmZlcuS5i+Wklui/mOWPr+S7peebtOaOpeWPkemAgUFycmF5QnVmZmVy44CBVHlwZWRCdWZmZXLjgIFEYXRhVmlld+OAgUJsb2JcclxuICAgICAqL1xyXG4gICAgc2VuZChtZXNzYWdlTmFtZTogc3RyaW5nLCBkYXRhPzogYW55W10gfCBhbnksIG5lZWRBQ0s6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEubWFwKGl0ZW0gPT4gdGhpcy5fdHJhbnNmb3JtVHlwZShpdGVtKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX3RyYW5zZm9ybVR5cGUoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3VwZXIuc2VuZChtZXNzYWdlTmFtZSwgZGF0YSwgbmVlZEFDSyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6L2s5o2i5oiQ5ruh6Laz5Y+R6YCB6KaB5rGC55qE57G75Z6LXHJcbiAgICBwcml2YXRlIF90cmFuc2Zvcm1UeXBlKGRhdGE6IGFueSk6IEJ1ZmZlciB7XHJcbiAgICAgICAgaWYgKGlzQmxvYihkYXRhKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYmxvYlRvQnVmZmVyKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSB8fCBpc1R5cGVkQnVmZmVyKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlZGFycmF5VG9CdWZmZXIoZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGFWaWV3KGRhdGEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlZGFycmF5VG9CdWZmZXIoKDxEYXRhVmlldz5kYXRhKS5idWZmZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NlbmREYXRhKGRhdGE6IEJ1ZmZlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoYnVmZmVyVG9BcnJheWJ1ZmZlcihkYXRhKSk7ICAvL+S4jeWPr+S7peebtOaOpeWPkemAgWJ1ZmZlclxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2hlY2sgPSAoaW50ZXJ2YWw6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0LmJ1ZmZlcmVkQW1vdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhpbnRlcnZhbCA+PSAyMDAwID8gMjAwMCA6IGludGVydmFsICogMik7IC8v5pyA5oWiMuenkuajgOafpeS4gOasoVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2soMSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcclxuICAgIH1cclxufVxyXG4iXX0=
