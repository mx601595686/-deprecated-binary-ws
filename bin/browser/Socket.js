"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _Buffer = require('buffer/').Buffer;
const toArraybuffer = require('to-arraybuffer');
const blobToBuffer = require('blob-to-buffer');
const isTypedBuffer = require('is-typedarray');
const isBlob = (x) => {
    return x instanceof Blob || Object.prototype.toString.call(x) === '[object Blob]';
};
const isArrayBuffer = (x) => {
    return x instanceof ArrayBuffer || Object.prototype.toString.call(x) === '[object ArrayBuffer]';
};
const isDataView = (x) => {
    return x instanceof DataView || Object.prototype.toString.call(x) === '[object DataView]';
};
const BaseSocket_1 = require("../common/BaseSocket");
class Socket extends BaseSocket_1.BaseSocket {
    constructor(args) {
        const cf = {
            url: `ws${location.protocol === 'https:' ? 's' : ''}://${location.host}`
        };
        if (typeof args === 'string') {
            cf.url = args;
        }
        else if (typeof args === 'object') {
            Object.assign(cf, args);
        }
        if (!(cf.socket instanceof WebSocket))
            cf.socket = new WebSocket(cf.url);
        (cf.socket).binaryType = 'arraybuffer';
        (cf.socket).onopen = () => this.emit('open');
        (cf.socket).onclose = (ev) => this.emit('close', ev.code, ev.reason);
        (cf.socket).onerror = (err) => { console.error(err), this.emit('error', new Error('连接错误')); };
        (cf.socket).onmessage = (e) => this._receiveData(_Buffer.from(e.data));
        super('browser', cf);
    }
    /**
     * 浏览器版除了可以直接发送Buffer之外还可以直接发送ArrayBuffer、TypedBuffer、DataView、Blob
     */
    send(messageName, data, needACK = true) {
        if (Array.isArray(data)) {
            data = data.map(item => this._transformType(item));
        }
        else {
            data = this._transformType(data);
        }
        return super.send(messageName, data, needACK);
    }
    // 转换成满足发送要求的类型
    _transformType(data) {
        if (isBlob(data)) {
            return blobToBuffer(data);
        }
        else if (isArrayBuffer(data) || isTypedBuffer(data)) {
            return _Buffer.from(data);
        }
        else if (isDataView(data)) {
            return _Buffer.from(data.buffer);
        }
        else {
            return data;
        }
    }
    _sendData(data) {
        return new Promise((resolve, reject) => {
            this.socket.send(toArraybuffer(data)); //不可以直接发送buffer
            const check = (interval) => {
                setTimeout(() => {
                    if (this.socket.bufferedAmount === 0) {
                        resolve();
                    }
                    else {
                        check(interval >= 2000 ? 2000 : interval * 2); //最慢2秒检查一次
                    }
                }, interval);
            };
            check(1);
        });
    }
    close() {
        this.socket.close();
    }
}
exports.Socket = Socket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
