"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Emitter = require("component-emitter");
const object2buffer_1 = require("object2buffer");
/**
 * Socket 接口的抽象类，定义了socket需要实现的基础功能
 */
class BaseSocket extends Emitter {
    constructor(configs) {
        super();
        /**
         * _messageID 的ID号，id从0开始。每发一条消息，该id加1
         */
        this._messageID = 0;
        /**
         * 等待发送消息的队列。key：messageID。
         */
        this._queue = new Map();
        this.url = configs.url;
        this._needDeserialize = configs.needDeserialize === undefined ? true : configs.needDeserialize;
        this._maxPayload = configs.maxPayload === undefined ? 1024 * 1024 * 100 : configs.maxPayload;
        if (configs.socket === undefined)
            throw new Error('传入BaseSocket的configs.socket不可以为空');
        else
            this._socket = configs.socket;
        this.once('close', () => {
            for (let item of [...this._queue.values()].reverse()) {
                const result = item.cancel(new Error('连接中断'));
                if (result === false)
                    item.ack(new Error('连接中断')); //取消正在发送的
            }
        });
    }
    /**
     * 连接的当前状态
     */
    get readyState() {
        return this._socket.readyState;
    }
    /**
     * 在缓冲队列中等待发送的数据字节数
     */
    get bufferedAmount() {
        let size = 0;
        for (let item of this._queue.values()) {
            size += item.data.length;
        }
        return size;
    }
    /**
     * 序列化消息头部。
     *
     * @private
     * @param {boolean} isInternal 是否是内部消息
     * @param {dataType} messageName 消息的名称
     * @param {boolean} needACK
     * @param {number} messageID
     * @returns {Buffer}
     * @memberof BaseSocket
     */
    _serializeHeader(isInternal, messageName, needACK, messageID) {
        const header = object2buffer_1.serialize([isInternal, needACK, messageID, messageName]);
        const headerLength = object2buffer_1.NodeBuffer.alloc(8);
        headerLength.writeDoubleBE(header.length, 0);
        return object2buffer_1.NodeBuffer.concat([headerLength, header]);
    }
    /**
     * 反序列化头部
     */
    _deserializeHeader(data) {
        const headerLength = data.readDoubleBE(0);
        const header = object2buffer_1.deserialize(data.slice(8, headerLength));
        return {
            isInternal: header[0],
            needACK: header[1],
            messageID: header[2],
            messageName: header[3],
            headerLength: 8 + headerLength
        };
    }
    /**
     * 发送数据。发送失败直接抛出异常
     *
     * @param {dataType} messageName 消息的名称(标题)
     * @param {dataType[]} [data=[]] 要发送的数据。如果是传入的是数组，则数据将使用object2buffer进行序列化。如果传入的是Buffer，则将直接被发送。(注意：传入的Buffer如果不是object2buffer序列化产生的，则需要接收方设置needDeserialize = false)
     * @param {boolean} [needACK=true] 发出的这条消息是否需要确认对方是否已经收到
     * @param {boolean} [prior=false] 是否直接发送（在缓冲队列中排队。默认false）
     * @returns {(Promise<void> & { messageID: number })} messageID
     */
    send(messageName, data = [], needACK = true, prior = false) {
        return this._send(false, prior, messageName, needACK, data);
    }
    /**
      * 发送内部数据。发送失败直接抛出异常。内部数据默认不需要接收端确认 ，并且默认优先发送
      * 注意：要在每一个调用的地方做好异常处理
      */
    _sendInternal(messageName, data = [], needACK = false, prior = true) {
        return this._send(true, prior, messageName, needACK, data);
    }
    _send(isInternal, prior, messageName, needACK, data) {
        const msgID = this._messageID++;
        const prom = new Promise((resolve, reject) => {
            const header = this._serializeHeader(isInternal, messageName, needACK, msgID);
            let sendingData; //要发送的数据
            if (Array.isArray(data))
                sendingData = object2buffer_1.NodeBuffer.concat([header, object2buffer_1.serialize(data)]);
            else
                sendingData = object2buffer_1.NodeBuffer.concat([header, data]);
            if (sendingData.length >= this._maxPayload) {
                throw new Error('发送的数据大小超过了限制');
            }
            const control = {
                data: sendingData,
                messageID: msgID,
                sent: false,
                cancel: (err) => {
                    if (control.sent)
                        return false;
                    else {
                        this._queue.delete(msgID);
                        err ? reject(err) : resolve();
                        return true;
                    }
                },
                send: () => {
                    if (control.sent)
                        return; //避免重复发送
                    control.sent = true;
                    if (needACK) {
                        this._sendData(sendingData).catch(control.ack);
                    }
                    else {
                        this._sendData(sendingData).then(control.ack).catch(control.ack);
                    }
                },
                ack: (err) => {
                    const isFirst = this._queue.values().next().value === control;
                    this._queue.delete(msgID);
                    err ? reject(err) : resolve();
                    if (isFirst && this._queue.size > 0)
                        this._queue.values().next().value.send();
                }
            };
            this._queue.set(msgID, control); //添加到队列中
            if (prior || this._queue.size === 1) {
                control.send();
            }
        });
        prom.messageID = msgID;
        return prom;
    }
    /**
     * 解析接收到数据。子类接收到消息后需要触发这个方法
     *
     * @protected
     * @param {Buffer} data 接收到数据
     * @memberof BaseSocket
     */
    _receiveData(data) {
        try {
            const header = this._deserializeHeader(data);
            if (header.needACK)
                this._sendInternal('ack', [header.messageID]).catch(err => this.emit('error', err));
            if (header.isInternal) {
                const body = object2buffer_1.deserialize(data.slice(header.headerLength));
                switch (header.messageName) {
                    case 'ack':
                        const callback = this._queue.get(body[0]);
                        callback && callback.ack();
                        break;
                }
            }
            else {
                const body = this._needDeserialize ? object2buffer_1.deserialize(data.slice(header.headerLength)) : data.slice(header.headerLength);
                setTimeout(() => {
                    this.emit('message', header.messageName, body);
                }, 0);
            }
        }
        catch (error) {
            this.emit('error', error);
        }
    }
    /**
     * 取消发送。如果某条消息还没有被发送则可以被取消。取消成功返回true，失败false
     *
     * @param {number} messageID 要取消发送消息的messageID
     * @param {Error} [err] 传递一个error，指示本次发送失败的原因
     * @returns {boolean} 取消成功返回true，失败false
     * @memberof BaseSocket
     */
    cancel(messageID, err) {
        const control = this._queue.get(messageID);
        if (control) {
            return control.cancel(err);
        }
        return false;
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
}
exports.BaseSocket = BaseSocket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
